Защищённый режим (32 бита)
##########################

*Согласно документации AMD*, процессор с архитектурой AMD64 имеет следующие
режимы работы:

- унаследованный реальный режим (legacy real mode),
- унаследованный защищённый режим (legacy protected mode),
- унаследованный режим виртуализации 8086 (legacy Virtual-8086 mode),
- длинный режим совместимости (long compatibility mode).
- длинный 64-битный режим (long 64-bit mode).

*Слова "Унаследованный" (legacy) и "длинный" (long) обычно отбрасываются,
когда речь идёт об особенностях, уникальных для конкретного режима, а
когда речь идёт об общих особенностях, используются только эти слова.*

После сброса процессор переходит в реальный режим.
Переход в другие режимы ПО должно выполнить самостоятельно.

*Режимы существенно отличаются, но первое (в порядке перехода из
реального режима) отличие заключается в сегментации памяти и доступности
регистров.*

Сегментация памяти
==================

Сегментация памяти *есть ничто иное как* разбиение виртуальной памяти на
отрезки (сегменты, segments).
*Когда страничная трансляция и SVM не задействованы, виртуальная память
совпадает с физической.*

Виртуальный адрес вычисляется с использованием эффективного адреса
(effective address,
вычисляемый исходя из значения регистра и кодировки инструкции) и
одного из переключателей (выборщиков) сегмента (segment selectors, особые
регистры процессора), выбираемого в зависимости от ситуации (выборка
инструкции, доступ к данным и т.д.)
Способ вычисления зависит от режима.

Сегментные регистры
~~~~~~~~~~~~~~~~~~~

- Пользовательские (переключатели сегментов)...
    - Код: ``CS``.
    - Данные: ``SS`` (стэк), ``DS`` (по умолчанию для большинства
      обращений к данным), ``ES`` (строковые инструкции), ``FS``, ``GS``.

- Системные...
    - Указатели таблиц: ``GDTR``, ``LDTR``, ``IDTR``.
    - Указатель задачи ``TR`` (Task Register).

Записать данные в переключатель можно со стека (``POP``) или
инструкцией ``MOV``.

Регистр задачи и сегмент состояния задачи
-----------------------------------------

``TR`` используется для выбора сегмента состояния задачи (TSS, Task-State
Segment).
*В данном примере аппаратная поддержка задач не рассматривается.*

Реальный режим
~~~~~~~~~~~~~~

*В этом режиме виртуальных адресов нет: механизм сегментации сразу вычисляет
физический адрес.*
Вычисления выполняются над 16 битными величинами::

    base_address = (S << 4);
    physical_address = base_address + effective_address;

Здесь ``S`` — число в соответствующем переключателе.

*Очевидно, что* доступен только начальный 1 MiB физической памяти.

Защищённый режим
~~~~~~~~~~~~~~~~

Защищённый режим включается битом ``CR0.PE`` (Protection Enabled, разрешение
защиты, бит 0).
Механизм сегментации влияет не только на преобразование адресов, но также
позволяет контролировать выполнение кода.
Настройки задаются через таблицы описателей сегментов:

- global-descriptor table (GDT) — глобальная таблица описателей;
- local-descriptor tables (LDT) — локальная таблица описателей;
- interrupt-descriptor table (IDT) — таблица описателей прерываний.

Размер описателя: 8 байт.
В длинных режимах могут присутствовать **и** описатели по 16 байт.
Выбор из GDT/LDT происходит по переключателю, а из IDT — по номеру вектора
прерывания.
Адрес нулевого описателя и размер таблицы определяется регистрами ``GDTR``,
``LDTR``, ``IDTR``, соответственно.
Значение регистра ``GDTR`` загружается из памяти (с помощью инструкции
``LGDT addr``), где имеет следующий формат...

*Напомним про порядок байт little-endian.*

- байты [1:0]: ограничитель (limit, задаёт размер).
  Ни один байт последнего описателя не должен иметь смещение *(от начала
  таблицы)* больше чем ограничитель.
- [10:2]: **виртуальный** (до трансляции по таблицам страниц) адрес нулевого
  описателя; в унаследованных режимах используются только первые 4 байта.
  *TODO: Проверить, что адрес в* ``*DTR`` *виртуальный.*

Формат ``IDTR`` в памяти такой же (и зависит от режима).
Загружается инструкцией ``LIDT addr``.

Загрузка ``LDTR`` выполняется инструкцией ``LLDT selector`` из GDT.
Если ``selector`` нулевой, то ``LDTR`` помечается как неверный, а попытки
использовать LDT вызывают ``#GP`` (кроме инструкций ``LAR``, ``VERR``,
``VERW`` и ``LSL``).

*Документация от AMD также содержит описание форматов*
``GDTR`` *,* ``LDTR`` *,* ``IDTR`` *непосредственно в процессоре.*
*При этом выделяется программно-видимая (software visible) и скрытая
(hidden) части.*
*Однако, не совсем понятно, как эту информацию можно использовать...*

Формат переключателя сегмента
-----------------------------

Размер: 16 бит.

- [2]: ``TI``, Table Indicator, выбор таблицы (0: GDT, 1:LDT).

- [15:3]: ``SI``, Selector Index, индекс описателя в таблице.
  Размер описателя — 8 байт.
  Если обнулить остальные биты, то получится смещение в таблице.
  Это справедливо и для длинного режима, где есть описатели длиной
  16 байт (повадание в правильное место — это проблема ПО).

- [1:0]:
    - ``DPL``, descriptor-privilege level (``==`` current-privilege level
      ``CPL``, когда это ``CS``).
    - ``RPL``, Requestor Privilege Level, запрашиваемый*?* уровень
      привилегий.

Адрес вычисляется следующим образом::

    virtual address = effective address + base address

Начальный адрес (``base address``) берётся из описателя сегмента,
выбираемого согласно соответствующему переключателю.

Вычисления выполняются над 32-битными величинами, что даёт доступ к начальным
4GiB виртуальной *(и физической? см. возможности трансляции страниц)* памяти.

Нулевой переключатель (null selector)
.....................................

Нулевой переключатель (``SI == 0``, ``TI == 0``) в ``DS``, ``ES``, ``FS`` и
``GS`` приводит к ``#GP``, при попытке обращения к данным.
Попытка записать его в ``CS`` сразу вызывает ``#GP``, как и при записи в
``SS`` (кроме 64-битного режима при ``CPL`` < 3).

*См. описание* ``CPUID Fn8000_0021_EAX[NullSelectorClearsBase]`` *(бит 6).*

Формат описателей сегмента
--------------------------

Формат описателя в памяти зависит от того, что он описывает.
Ниже приводится таблица форматов описателей для защищённого режима.
*Описатели в длинных режимах здесь не рассматриваются.*
Столбцы — типы описателей, строки — смещения он начала.
Объединённые столбцы — совпадение назначения битов разных форматов.
Объединённые строки — более длинные поля одного формата.
Некоторые поля раскиданы по не соседствующим битам: см. номера битов поля
в ``[]``.
Начиная со второго двойного слова, второй строкой указаны смещения от начала
второго слова.
Значения битов, определяющие формат, **выделены**.

+-------+-----------------------------------------------------------------------------------+
| Биты  | Описатель сегмента                                                                |
|       +---------------------------+-------------------------------------------------------+
|       | Пользовательский          | Системный                                             |
|       +--------------+------------+-----+------+-----------+-----------+-------+----------+
|       | Код          | Данные     | LDT | TSS  | Call-Gate | Interrupt | Trap  | Task     |
|       |              |            |     |      |           | -Gate     | -Gate | -Gate    |
+=======+==============+============+=====+======+===========+===========+=======+==========+
| 15:0  | Limit [15:0]                           | Target Code Segment           | Reserved |
|       |                                        | Offset [15:0]                 |          |
+-------+----------------------------------------+-------------------------------+----------+
| 31:16 | Base Address [23:0]                    | Target Code Segment Selector  | TSS      |
|       |                                        | [15:0]                        | Selector |
+-------+                                        +-----------+-------------------+----------+
| 36:32 |                                        | Parameter | Reserved                     |
|       |                                        | Count     |                              |
| 4:0   |                                        |           |                              |
+-------+                                        +-----------+------------------------------+
| 39:37 |                                        | Reserved                                 |
|       |                                        |                                          |
| 7:5   |                                        |                                          |
+-------+---------------------------+------------+------------------------------------------+
|       |                           | Type [3:0]                                            |
+-------+---------------------------+-----+------+-----------+-----------+-------+----------+
| 40    | A                         |**0**| **1**| **0**     | **0**     | **1** | **1**    |
|       | (Accessed)                |     |      |           |           |       |          |
| 8     |                           |     |      |           |           |       |          |
+-------+--------------+------------+-----+------+-----------+-----------+-------+----------+
| 41    | R            | W          |**1**| Busy | **0**     | **1**     | **1** | **0**    |
|       | (Readable)   | (Writable) |     |      |           |           |       |          |
| 9     |              |            |     |      |           |           |       |          |
+-------+--------------+------------+-----+------+-----------+-----------+-------+----------+
| 42    | C            | E          |**0**| **0**| **1**     | **1**     | **1** | **1**    |
|       | (Conforming) | (Expand-   |     |      |           |           |       |          |
| 10    |              | Down)      |     |      |           |           |       |          |
+-------+--------------+------------+-----+------+-----------+-----------+-------+----------+
| 43    | **1=Code**   | **1=Data** |**0**| 0. 16-bit                            | **0**    |
|       |              |            |     | 1. 32-bit                            |          |
| 11    |              |            |     |                                      |          |
+-------+--------------+------------+-----+--------------------------------------+----------+
| 44    | S                         | S                                                     |
|       | (System)                  | (System)                                              |
| 12    | **1 = Пользовательский**  | **0 = Системный**                                     |
+-------+---------------------------+-------------------------------------------------------+
| 46:45 | DPL                                                                               |
|       |                                                                                   |
| 14:13 |                                                                                   |
+-------+-----------------------------------------------------------------------------------+
| 47    | P                                                                                 |
|       | (Present)                                                                         |
| 15    |                                                                                   |
+-------+----------------------------------------+-------------------------------+----------+
| 51:48 | Limit [19:16]                          | Target Code Segement          | Reserved |
|       |                                        | Offset [31:16]                |          |
| 19:16 |                                        |                               |          |
+-------+----------------------------------------+                               |          |
| 52    | AVL                                    |                               |          |
|       | (Available to software)                |                               |          |
| 20    |                                        |                               |          |
+-------+----------------------------------------+                               |          |
| 53    | Reserved                               |                               |          |
|       |                                        |                               |          |
| 21    |                                        |                               |          |
+-------+----------------------------------------+                               |          |
| 54    | D (Default Operand Size)               |                               |          |
|       |                                        |                               |          |
|       | 0. 16 бит                              |                               |          |
| 22    | 1. 32 бит                              |                               |          |
+-------+----------------------------------------+                               |          |
| 55    | G                                      |                               |          |
|       | (Granularity)                          |                               |          |
| 23    |                                        |                               |          |
+-------+----------------------------------------+                               |          |
| 63:56 | Base Address [31:24]                   |                               |          |
|       |                                        |                               |          |
| 31:24 |                                        |                               |          |
+-------+----------------------------------------+-------------------------------+----------+

Описание полей...

AVL
  ПО может использовать этот бит по своему усмотрению.

A
  ЦП устанавливает этот бит, когда загружает описатель.
  Сброс бита — прерогатива ПО.

P
  Если этот бит сброшен, то при попытке обратиться к сегменту будет ``#NP``.
  *Это может использоваться для реализации механизма вытеснения памяти
  на ПЗУ (т.н. "swap").*

W
  Если сброшен, то разрешено только чтение *(из сегмента)*.
  Выполнять сегмент данных нельзя.
  *TODO: какое исключение?*

R
  Сброс бита разрешает только выполнение *(кода из сегмента)*.
  Писать в сегмент кода нельзя.
  *TODO: какое исключение?*

  *Понятно, что это сработает, если выбрать описатель сегмента кода
  переключателем для данных.*
  *Но что если выбрать в переключатель данных описатель сегмента данных,
  ссылающийся на те же адреса, что и текущий сегмент кода в выбранный
  переключателем кода?*

D
  Размер операнда/адреса по умолчанию (переопределяется
  префиксами *(инструкций)*).
  Для сегмента стека влияет на используемый размер указателя
  стека (``SP``/``ESP``).

Type
  Биты [43:40] *([11:8])* системных (``S==0``) описателей определяют тип
  описателя.
  В таблице приведены значения битов для каждого типа описателя.
  Не указанные комбинации не корректны.

*Механизмы задач и врат здесь не рассматриваются, но описания полей приведём
на будущее.*

Target Code Segment ``Selector:Offset``
  Загружается в ``CS:EIP`` при передаче управления через
  врата *(выбирая новый сегмент кода и следующую выполняемую инструкцию)*.

TSS Selector
  Выбирает описатель задачи *(см. столбец TSS)* при переходе через врата.

Parameter Count
  Количество параметров, копируемых с текущего стека на новый стек при
  *(автоматическом)* переключении задачи при передаче управления в более
  привилегированное кольцо через врата.
  Размер одного параметра определяется битом 43 *(11)*.

TODO: ``limit``, ``G``, ``E``. (Проверка размеров)

21-я адресная линия A20
=======================

Пример
======

Плоская модель памяти (Flat-Memory Model)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Много-сегментная модель памяти (Multi-Segmented Model)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Имитация Гарвардской архитектуры
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Источники
=========

.. _A20 Line. OSDev: https://wiki.osdev.org/A20_Line
.. _A20 - a pain from the past: https://www.win.tue.nl/~aeb/linux/kbd/A20.html
