Защищённый режим (32 бита)
##########################

*Согласно документации AMD*, процессор с архитектурой AMD64 имеет следующие
режимы работы:

- унаследованный реальный режим (legacy real mode),
- унаследованный защищённый режим (legacy protected mode),
- унаследованный режим виртуализации 8086 (legacy Virtual-8086 mode),
- длинный режим совместимости (long compatibility mode).
- длинный 64-битный режим (long 64-bit mode).

*Слова "Унаследованный" (legacy) и "длинный" (long) обычно отбрасываются,
когда речь идёт об особенностях, уникальных для конкретного режима, а
когда речь идёт об общих особенностях, используются только эти слова.*

После сброса процессор переходит в реальный режим.
Переход в другие режимы ПО должно выполнить самостоятельно.

*Режимы существенно отличаются, но первое (в порядке перехода из
реального режима) отличие заключается в сегментации памяти и доступности
регистров.*

Сегментация памяти
==================

Сегментация памяти *есть ничто иное как* разбиение физической памяти на
отрезки (сегменты, segments).
Физический адрес (physical address, используемый процессором для обращения
к ОЗУ) вычисляется с использованием эффективного адреса (effective address,
вычисляемый исходя из значения регистра и кодировки инструкции) и
одного из переключателей (выборщика) сегмента (segment selectors, особые
регистры процессора), выбираемого в зависимости от ситуации (выборка
инструкции, доступ к данным и т.д.)
Способ вычисления зависит от режима *(работы процессора)*.

Сегментные регистры
~~~~~~~~~~~~~~~~~~~

- Пользовательские (переключатели сегментов)...
    - Код: ``CS``.
    - Данные: ``SS`` (стэк), ``DS`` (по умолчанию для большинства
      обращений к данным), ``ES`` (строковые инструкции), ``FS``, ``GS``.

- Системные...
    - Указатели таблиц: ``GDTR``, ``LDTR``, ``IDTR``.
    - Указатель задачи ``TR`` (Task Register).

Записать данные в переключатель можно со стека (``POP``) или
инструкцией ``MOV``.

Регистр задачи и сегмент состояния задачи
-----------------------------------------

``TR`` *используется для выбора сегмента состояния задачи (TSS, Task-State
Segment).*
*В данном примере аппаратная поддержка задач не рассматривается.*

Реальный режим
~~~~~~~~~~~~~~

Вычисления выполняются над 16 битными величинами::

    base_address = (S << 4);
    physical_address = base_address + effective_address;

Здесь ``S`` — число в соответствующем переключателе.

*Очевидно*, доступен только начальный 1 MiB физической памяти.

Защищённый режим
~~~~~~~~~~~~~~~~

Защищённый режим включается битом ``CR0.PE`` (Protection Enabled, разрешение
защиты, бит 0).
Выполнение кода контролируется таблицами описателей сегментов:

- global-descriptor table (GDT) — глобальная таблица описателей;
- local-descriptor tables (LDT) — локальная таблица описателей;
- interrupt-descriptor table (IDT) — таблица описателей прерываний.

Таблицы состоят из описателей по 8 байт.
В длинных режимах могут *также* присутствовать описатели по 16 байт.
Выбор из GDT/LDT происходит по переключателю, а из IDT — по номеру вектора
прерывания.
Адрес нулевого описателя и размер таблицы определяется регистрами ``GDTR``,
``LDTR``, ``IDTR``, соответственно.
Значение регистра ``GDTR`` загружается из памяти (с помощью инструкции
``LGDT addr``), где имеет следующий формат...

- байты [1:0] (little-endian): ограничитель (limit).
- [10:2]: *виртуальный* (до трансляции по таблицам страниц) адрес нулевого
  описателя; в унаследованных режимах используются только первые 4 байта.
  *TODO: Проверить, что адрес в* ``*DTR`` *виртуальный.*

Формат ``IDTR`` в памяти такой же (и зависит от режима).
Загружается инструкцией ``LIDT addr``.

Загрузка ``LDTR`` выполняется инструкцией ``LLDT selector`` из GDT.
Если ``selector`` нулевой, то ``LDTR`` помечается как неверный, а попытки
использовать LDT вызывают ``#GP`` (кроме инструкций ``LAR``, ``VERR``,
``VERW`` и ``LSL``).

*Документация от AMD также содержит описание форматов*
``GDTR`` *,* ``LDTR`` *,* ``IDTR`` *непосредственно в процессоре.*
*При этом выделяется программно-видимая (software visible) и скрытая
(hidden) части.*
*Однако, не совсем понятно, как эту информацию можно использовать...*

Вычисления выполняются над 32-битными величинами, что даёт доступ к начальным
4GiB виртуальной *(и физической? см. возможности трансляции страниц)* памяти.

Формат переключателя сегмента
-----------------------------

Размер: 16 бит.

- [2]: ``TI``, Table Indicator, выбор таблицы (0: GDT, 1:LDT).

- [15:3]: ``SI``, Selector Index, индекс описателя в таблице.
  Размер описателя — 8 байт.
  Если обнулить остальные биты, то получится смещение в таблице.
  Это справедливо и для длинного режима, где есть описатели длиной
  16 байт (повадание в правильное место — это проблема ПО).

- [1:0]:
    - ``DPL``, descriptor-privilege level (``==`` current-privilege level
      ``CPL``, когда это ``CS``).
    - ``RPL``, Requestor Privilege Level, *запрашиваемый?* уровень
      привелегий.

Нулевой переключатель (null selector)
.....................................

Нулевой переключатель (``SI == 0``, ``TI == 0``) в ``DS``, ``ES``, ``FS`` и
``GS`` приводит к ``#GP``, при попытке обращения к данным.
Попытка записать его в ``CS`` сразу вызывает ``#GP``, как и при записи в
``SS`` (кроме 64-битного режима при ``CPL`` < 3).

*См. описание* ``CPUID Fn8000_0021_EAX[NullSelectorClearsBase]`` *(бит 6).*

Формат описателей сегмента
--------------------------

Формат описателя в памяти зависит от того, что он описывает.
Ниже приводится сводная таблица описателей для защищённого режима.
*Описатели в длинных режимах здесь не рассматриваются.*

+-------+--------------------------------------------------------------------------------------+
| Биты  | Описатель сегмента                                                                   |
|       +---------------------------+----------------------------------------------------------+
|       |  Пользовательский         | Системный                                                |
|       +--------------+------------+-----+-----+-----------+-------------------+--------------+
|       | Код          | Данные     | LDT | TSS | Call-Gate | Interrupt-Gate    | Task-Gate    |
|       |              |            |     |     |           | и Trap-Gate       |              |
+=======+==============+============+=====+=====+===========+===================+==============+
| 15:0  | Limit [15:0]                          | Target Code Segment           | Reserved     |
|       |                                       | Offset [15:0]                 |              |
+-------+---------------------------------------+-------------------------------+--------------+
| 31:16 | Base Address [15:0]                   | Target Code Segment Selector  | TSS Selector |
+-------+---------------------------------------+-----------+-------------------+--------------+
| 36:32 | Base Address [20:16]                  | Parameter | Reserved                         |
|       |                                       | Count     |                                  |
| 4:0   |                                       |           |                                  |
+-------+---------------------------------------+-----------+----------------------------------+
| 39:37 | Base Address [23:21]                  | Reserved                                     |
|       |                                       |                                              |
| 7:5   |                                       |                                              |
+-------+---------------------------+-----------+----------------------------------------------+
| 40    | A                         | Type [3:0]                                               |
|       | (Accessed)                |                                                          |
| 8     |                           |                                                          |
+-------+--------------+------------+                                                          |
| 41    | R            | W          |                                                          |
|       | (Readable)   | (Writable) |                                                          |
| 9     |              |            |                                                          |
+-------+--------------+------------+                                                          |
| 42    | C            | E          |                                                          |
|       | (Conforming) | (Expand-   |                                                          |
| 10    |              | Down)      |                                                          |
+-------+--------------+------------+                                                          |
| 43    | 1            | 0          |                                                          |
|       | {= Code}     | {= Data}   |                                                          |
| 11    |              |            |                                                          |
+-------+--------------+------------+----------------------------------------------------------+
| 44    | S                         | S                                                        |
|       | (System)                  | (System)                                                 |
| 12    | {1 = Пользовательский}    | {0 = Системный}                                          |
+-------+---------------------------+----------------------------------------------------------+
| 46:45 | DPL                                                                                  |
|       |                                                                                      |
| 14:13 |                                                                                      |
+-------+--------------------------------------------------------------------------------------+
| 47    | P                                                                                    |
|       | (Present)                                                                            |
| 15    |                                                                                      |
+-------+---------------------------------------+-------------------------------+--------------+
| 51:48 | Limit [19:16]                         | Target Code Segement          | Reserved     |
|       |                                       | Offset [31:16]                |              |
| 19:16 |                                       |                               |              |
+-------+---------------------------------------+                               |              |
| 52    | AVL                                   |                               |              |
|       |                                       |                               |              |
| 20    |                                       |                               |              |
+-------+---------------------------------------+                               |              |
| 53    | Reserved                              |                               |              |
|       |                                       |                               |              |
| 21    |                                       |                               |              |
+-------+---------------------------------------+                               |              |
| 54    | D                                     |                               |              |
|       | (Default Operand Size)                |                               |              |
| 22    |                                       |                               |              |
+-------+---------------------------------------+                               |              |
| 55    | G                                     |                               |              |
|       | (Granularity)                         |                               |              |
| 23    |                                       |                               |              |
+-------+---------------------------------------+                               |              |
| 63:56 | Base Address [31:24]                  |                               |              |
|       |                                       |                               |              |
| 31:24 |                                       |                               |              |
+-------+---------------------------------------+-------------------------------+--------------+

Плоская модель памяти (Flat-Memory Model)
-----------------------------------------

Много-сегментная модель памяти (Multi-Segmented Model)
------------------------------------------------------

Режим виртуализации 8086
------------------------

- ? optional paging
- ? limited protection checking

Длинный режим
~~~~~~~~~~~~~

Режим совместимости
-------------------

compatibility mode ssegmentation == legacy mode ssegmentation (real / protedted)

< 4 GiB

64-битный режим
---------------

Сегментация *почти* полностью отключена.
Начальный адрес (base address) считается 0.
Ограничитель (limit) и атрибуты игнорируются (вместо этого требуется
канонический адрес).

Исключения:

- ``CS``: ``DPL``, ``D`` (default operation size), ``L`` (long) атрибуты;

- ``FS``, ``GS``: могут иметь не нулевой начальный адрес (base address),
  расширенный до 64 бит;
  могут использоваться для TLS (i.e. thread-local data).

Вход/выход и/из длинного режима и работа в нём (в т.ч. переключение между
64-битным режимом и режимом совместимости) не меняет ни видимую, ни
скрытую часть сегментных регистров, за исключением явных загрузок.

21-я адресная линия A20
=======================

Пример
======

Имитация Гарвардской архитектуры
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Источники
=========

.. _A20 Line. OSDev: https://wiki.osdev.org/A20_Line
.. _A20 - a pain from the past: https://www.win.tue.nl/~aeb/linux/kbd/A20.html

